/*
 * Styleguide
 * Layout & mixins
 * by Alsacréations - 2016-2017
 */

// stylelint-disable value-list-max-empty-lines, color-format/format, scale-unlimited/declaration-strict-value, scss/media-feature-value-dollar-variable, no-decending-specificity, selector-no-qualifying-type, scss/dollar-variable-colon-space-before

// Config things (mêmes imports que pour styles.scss ; contrainte : aucun des 3 ne doit générer de règle CSS => seulement définir des mixins et variables)
//
// Same variables than for project and KNACSS
@import "_config/variables";
// Mixins
@import "_config/mixins";


// Variables list for Styleguide (if used)
$colors: (
  brand-primary      : $brand-primary,
  brand-secondary    : $brand-secondary,

  color-base: $color-base,
  color-link: $link-color,
  background-base: $background-base,

  gray-light   : $gray-light,
  gray-lightest: $gray-lightest,
  gray-a11y    : $gray-a11y,

  color-brand: $color-brand,
  color-primary: $color-primary,
  color-success: $color-success,
  color-info: $color-info,
  color-warning: $color-warning,
  color-danger: $color-danger,
  color-inverse: $color-inverse,
  color-ghost: $color-ghost,
  color-muted: $color-muted,

  // color-error: $color-error,
  // color-success: $color-success,
);

// Classes on section are compiled from their heading and it can easily change. Let's use some variables for that
$section-color: ".sg-section-" + "palette-de-couleurs";
$section-grid : ".sg-section-" + "grilles";

/*
 * Sass Mixins
 */
// mixin that displays font-size value
@mixin fontsize ($fontsize) {
  &::after {
    content: "#{$fontsize}";
    @extend %sg-code-inline;
    margin-left: $spacer-small;
    vertical-align: middle;
    font-weight: normal;
  }
}

// mixin that displays hexadecimal code of a color
@mixin hexa ($sassvar, $sasscolor) {
  &::before {
    background: #{$sasscolor};
  }

  &::after {
    content: "$#{$sassvar}";
  }
}

// Mixin that displays font-family
@mixin font ($font) {
  &::before {
    content: "#{$font}";
    font-weight: bold;
  }
}


/*
 * Layout
 */

/* body */
.sg {
  position: relative;
  padding: 0;
  // font-family: Segoe UI, Frutiger, Dejavu Sans, Helvetica Neue, Arial, sans-serif;
  font-family: $font-family-base;
  background-color: $background-base;
}

h1,
h2,
h3 {
  font-weight: normal;
}

h1 {
  margin-top: 0;
  margin-bottom: 0;
}


/* Header */
.sg-header {
  position: relative;
  margin-bottom: $spacer-small;
  padding: $spacer-medium;
  text-align: center;
  background: #f8f8f8;

  h1 {
    font-size: 4.5rem;
    color: $brand-primary;
  }

  h2 {
    margin-top: 0;
    font-size: 2rem;
    color: $gray-a11y;
  }

  .icon-kiwi-leaf {
    display: inline-block;
    width: 1em;
    height: 1em;
    fill: currentColor;
  }

  .icon-pepins {
    position: absolute;
    top: 2rem;
    right: 2rem;
  }
}


/* Sidebar/Menu */
.sg-menu {
  display: none;
  position: absolute;
  top: 19rem;
  left: 2rem;
  width: 22rem;
  padding: $spacer-medium;
  background: #f8f8f8;

  &.is-fixed {
    position: fixed;
    top: 2rem;
  }
}
@media (min-width: 768px) {
  .sg-menu {
    display: block;
  }
}


/* Menu with Tocify */
.tocify-header {
  margin: 0;
  padding: 0;
  list-style-type: none;

  ul {
    margin: 0 0 $spacer-small;
    padding-left: $spacer-medium;
    font-size: 90%;
    list-style-type: none;
  }
}

.tocify-item {
  margin: 0;
  padding: $spacer-tiny 0;

  a {
    border-bottom: 0 solid;
    padding-bottom: 0.25rem;
    text-decoration: none;

    &:focus,
    &:hover {
      border-bottom-width: 1px;
    }
  }
}

.tocify-focus {
  a { // stylelint-disable-line
    font-weight: bold;
    color: $brand-primary;
  }
}

.tocify-subheader {
  display: none;
}

.tocify-extend-page {
  display: none !important; // stylelint-disable-line declaration-no-important
}


/*
 * Typography
 */
/* main title */
.sg-title {
  margin-top: $spacer-small;
  @include font-size(h1);
}

/* copyright */
.sg-copyright {
  text-align: center;
  font-size: 1.2rem;
  color: #666;
}

/* section title */
.sg-section {
  & > h2.sg {
    border-bottom: 2px solid #eee;
    padding-bottom: 0.15em;
    @include font-size(h1);
    color: #333;
  }

  &:first-child > h2.sg {
    margin-top: 0;
  }
}

.sg-text h3.sg {
  border-left: 4px solid $brand-primary;
  padding-left: 10px;
  color: #333;
}

/* text */
.sg-text {
  p {
    line-height: 2;
  }
}


/*
 * Styleguide Content
 */
.sg-content {
  position: relative;
  padding: $spacer-small-plus;

  @media (min-width: 768px) {
    margin-left: 24rem;
    padding: $spacer-medium $spacer-large;
  }

  @media (min-width: 1580px) {
    max-width: 1080px;
    margin: auto;
    padding: $spacer-medium;
  }
}

/* section */
.sg-section { // stylelint-disable-line no-duplicate-selectors
  margin-bottom: $spacer-extra-large;
}

/* example & canvas */
.sg-example {
  border: 1px solid #ddd;
  margin-top: $spacer-small;
  margin-bottom: $spacer-medium;
  border-radius: 3px;
}

.sg-canvas {
  overflow-x: auto;
  position: relative;
  padding: $spacer-large 3rem;
}


/*
 * Code
 */
/* inline: <code> */
%sg-code-inline {
  display: inline-block;
  border: solid 1px #eaeaea;
  padding: 0.2rem 0.5rem;
  white-space: nowrap;
  font-size: 1.4rem;
  font-family: $font-family-monospace;
  background-color: #f8f8f8;
  border-radius: 2px;
}

code,
code.sg,
.sg-code-inline {
  @extend %sg-code-inline;
}

/* block: <pre> */
.sg-code {
  border-top: solid 1px #eaeaea;
  margin-top: 0;
  padding: $spacer-medium;
  line-height: 1.6;
  font-size: 1.4rem;
  font-family: $font-family-monospace;
  background-color: #f8f8f8;
}

/* markup color */
.sg-code .hljs-tag,
.sg-code .hljs-title {
  color: #2f6f9f;
}

.sg-code .hljs-attribute {
  color: #4f9fcf;
}

.sg-code .hljs-string,
.sg-code .hljs-number,
.sg-code .hljs-value {
  color: #d44950;
}

.sg-code .hljs-comment {
  color: #998;
}

/* toggle button */
.sg-code-toggle {
  position: absolute;
  bottom: 0;
  right: 0;
  width: 100px;
  border: 1px solid #ddd;
  border-width: 1px 0 0 1px;
  padding: $spacer-tiny;
  text-align: center;
  font-size: 1.3rem;
  color: #777;
  background-color: white;
  border-top-left-radius: 3px;

  &:focus,
  &:hover {
    background-color: #f8f8f8;
  }
}


/*
 * Colors section
 */
#{ $section-color } {
  // No need for a "show markup" toggle here
  .sg-code-toggle {
    display: none;
  }

  // <hr> white on white (but we keep its vertical margin and semantics)
  hr {
    background-color: $background-base;
  }
}

.sg-color {
  & + & {
    margin-top: $spacer-large;
  }
}

.sg-color-item {
  display: inline-block;
  width: 150px;
  border: solid 1px #eaeaea;
  margin: $spacer-small;
  vertical-align: top;

  // color example
  &::before {
    content: "";
    display: block;
    height: 80px;
  }

  // hexadecimal code
  &::after {
    display: block;
    @extend %sg-code-inline;
  }

  // Colors
  $i: 1;
  @each $var, $col in $colors {
    &:nth-of-type(#{$i}) {
      $i: $i + 1;
      @include hexa($var, $col);
    }
  }
}

/*
 * Icons
 */
/*
.sg-icon {
  display: flex;
  flex-wrap: wrap;

  & > [class*="icon-"] {
    width: calc(100% / 2);
    margin: 0 0 $spacer-large;
    text-align: center;

    @include respond-to("small-up") {
      width: calc(100% / 5);
    }

    code {
      font-size: 1.2rem;
    }

    &:before {
      display: block;
      margin-bottom: $spacer-small;
      font-size: 4rem;
      text-align: center;
    }
  }
}
*/


/*
 * Fonts section
 */
[class*="sg-font-"] {
  & + & {
    margin-top: $spacer-medium;
  }
}
// hides "show markup" button
.sg-section-fonts {
  .sg-code-toggle {
    display: none;
  }
}

.sg-font-common {
  font-family: $font-family-base;
  @include font($font-family-base);
}

.sg-font-headings {
  font-family: $font-family-headings;
  @include font($font-family-headings);
}

.sg-font-monospace {
  font-family: $font-family-monospace;
  @include font($font-family-monospace);
}


/*
 * Headings section
 */
$elt-headings: (h1, h2, h3, h4, h5, h6);

.sg-section-titres {
  @each $h in $elt-headings {
    #{$h}:not(.sg) { @include fontsize(#{$h}-size); }
  }
}


/*
 * Grids section
 */
#{ $section-grid } {
  .grid,
  [class^="grid"] {
    & + & { // stylelint-disable-line selector-max-combinators, selector-max-compound-selectors
      margin-top: $spacer-medium;
    }

    & > * { // stylelint-disable-line selector-max-compound-selectors
      padding: $spacer-medium;
      background: #f8f8f8;
    }
  }
}


/*
 * Block alignment section
 */
.sg-align-block {
  padding: $spacer-medium;
  background: #f8f8f8;

  & + & {
    margin-top: $spacer-medium;
  }
}

.sg-align-float {
  padding: $spacer-medium;
  background: #f8f8f8;

  // @extend .clearfix; @NOTE Sass compilation crashes if styleguide.scss is compiled by itself (without importing KNACSS), thus clearfix :pseudo rule is hard coded here without the help of an @extend
  // Clearfix
  &::after {
    content: "";
    display: table;
    border-collapse: collapse;
    clear: both;
  }

  & + & {
    margin-top: $spacer-medium;
  }

  & > div[class*="f"] {
    padding: $spacer-small;
    background: #ddd;
  }
}
